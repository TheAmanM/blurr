[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "privacy-redactor-rt"
version = "0.1.0"
description = "Real-time sensitive information detection and redaction system"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Privacy Redactor RT Team"},
]
keywords = ["privacy", "redaction", "video", "real-time", "ocr"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Video",
    "Topic :: Security",
]

dependencies = [
    # Core dependencies for CLI
    "typer>=0.12.0",
    "rich>=13.6.0",
    
    # Configuration and validation
    "pydantic>=2.4.0",
    "pyyaml>=6.0.0",
    
    # Image processing (minimal versions)
    "numpy>=1.26.0",
    "opencv-python>=4.5.0",
    "pillow>=10.0.0",
    
    # Phone number validation
    "phonenumbers>=8.13.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest==7.4.3",
    "pytest-cov==4.1.0",
    "pytest-asyncio==0.21.1",
    
    # Code quality
    "ruff==0.1.6",
    "black==23.10.1",
    "isort==5.12.0",
    "mypy==1.7.0",
    
    # Pre-commit hooks
    "pre-commit==3.5.0",
]

# Web interface dependencies
streamlit = [
    "streamlit>=1.28.0",
    "streamlit-webrtc>=0.47.0",
]

gradio = [
    "gradio>=4.0.0",
]

fastapi = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "websockets>=12.0",
]

# OCR and ML dependencies
ml = [
    "paddlepaddle>=3.0.0",
    "paddleocr>=3.0.0",
]

# All web interfaces
web = [
    "privacy-redactor-rt[streamlit,gradio,fastapi]",
]

# Complete installation with all features
all = [
    "privacy-redactor-rt[dev,web,ml]",
]

[project.scripts]
privacy-redactor-rt = "privacy_redactor_rt.cli:app"
privacy-redactor-app = "privacy_redactor_rt.app:main"
privacy-redactor-gradio = "privacy_redactor_rt.gradio_app:main"
privacy-redactor-fastapi = "privacy_redactor_rt.fastapi_app:main"

[project.urls]
Homepage = "https://github.com/privacy-redactor/privacy-redactor-rt"
Repository = "https://github.com/privacy-redactor/privacy-redactor-rt"
Issues = "https://github.com/privacy-redactor/privacy-redactor-rt/issues"

[tool.hatch.build.targets.wheel]
packages = ["privacy_redactor_rt"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
target-version = ['py311']
line-length = 88
skip-string-normalization = true

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["privacy_redactor_rt"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
]

[tool.coverage.run]
source = ["privacy_redactor_rt"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "pytest>=7.4.3",
]
